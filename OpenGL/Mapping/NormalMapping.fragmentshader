#version 330 core

precision mediump float;

uniform sampler2D myTextureSampler;
uniform vec3 lightDir;

in vec2 v_texCoord;
in vec3 v_normal, v_view;

out vec4 color;

void main()
{
	// ±¤¿øÀÇ »ö»ó
	vec3 lightColor = vec3(1.0);
	// ½ºÆäÅ§·¯ °è¼ö
	vec3 matSpec = vec3(1.0, 1.0, 1.0);
	// ¾Úºñ¾ðÆ® ±¤¿ø »ö»ó
	vec3 srcAmbi = vec3(0.3, 0.3, 0.3);

	// normalization
	vec3 normal = normalize(v_normal);
	vec3 view = normalize(v_view);
	vec3 light = normalize(lightDir);

	// Diffuse Term
	vec3 matDiff = texture(myTextureSampler, v_texCoord).rgb;
	vec3 diff = max(dot(normal, light), 0.0) * lightColor * matDiff;

	// Specular Term
	vec3 refl = 2.0 * normal * dot(normal, light) - light;
	vec3 spec = pow(max(dot(refl, view), 0.0), 30.0) * lightColor * matSpec;

	// Ambient Term
	vec3 ambi = srcAmbi * matDiff;

	color = vec4(diff + spec + ambi, 1.0);
}